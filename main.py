# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏/–º–æ–¥—É–ª–∏
import telebot
import logging
import sqlite3
import time
import os

from dotenv import load_dotenv
from telebot import types
from db import create_tables, create_playing_table
from state import create_states

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

PORT = int(os.getenv("PORT", 5000))  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 5000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
user_data = {}

rules_text = '''–ü—Ä–∞–≤–∏–ª–∞ : üôä
1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–µ—â–µ–Ω–æ —É—á–∞—Å—Ç–∏–µ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏–∑ Black Pass. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–¥–∞—ë—Ç—Å—è –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ –≤–∏–¥–µ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ üöó\n
2. –û–ø–ª–∞—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–æ —Ç—É—Ä–Ω–∏—Ä–∞, –±–µ–∑ –æ–ø–ª–∞—Ç—ã –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º üíµ\n
3. –ê–±—Å–æ–ª—é—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω DM (DeathMatch ‚Äì –£–±–∏–π—Å—Ç–≤–æ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã) –∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –ø–æ–º–µ—Ö–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ –≤–∏–¥–µ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ üë§\n
4. –í—ã–∏–≥—Ä–∞–≤—à–∏—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –≤ –ø—Ä–∞–≤–µ —Å–ø–æ—Ä–∏—Ç—å —Å —Å—É–¥—å—ë–π –æ "–ø–æ–±–µ–¥–∏–≤—à–µ–º". –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–¥–∞—ë—Ç—Å—è –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ –≤–∏–¥–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è üòå\n
5. –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–æ–æ–±—â–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –ó–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 20 –º–∏–Ω—É—Ç, —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ –≤–∏–¥–µ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚è≥\n
6. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã—è—Å–Ω–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞, —Ç–∞–∫–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ü§¨\n
'''

@bot.message_handler(commands=['show_player'])
def show_player(message):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM players")
            rows = cursor.fetchall()

            if rows:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                result = "<b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
                for row in rows:
                    result += f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}, –ú–∞—à–∏–Ω–∞: {row[3]}\n"
            else:
                result = "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."

        bot.send_message(message.chat.id, result, parse_mode='html')

    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(commands=['show_playing'])
def show_playing(message):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM playing")
            rows = cursor.fetchall()

            if rows:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                result = "<b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ:</b>\n"
                for row in rows:
                    result += f"ID: {row[0]}, –ò–º—è: {row[1]}, –ú–∞—à–∏–Ω–∞: {row[2]}\n"
            else:
                result = "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ."

        bot.send_message(message.chat.id, result, parse_mode='html')

    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(commands=['delete_playing'])
def delete_playing(message):
    user_id = message.chat.id  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM playing WHERE id = ?", (user_id,))
            if cursor.rowcount > 0:
                bot.send_message(user_id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'playing'.")
            else:
                bot.send_message(user_id, "–í —Ç–∞–±–ª–∏—Ü–µ 'playing' –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'playing'.")

@bot.message_handler(commands=['delete_players'])
def delete_players(message):
    user_id = message.chat.id  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM players WHERE id = ?", (user_id,))
            if cursor.rowcount > 0:
                bot.send_message(user_id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'players'.")
            else:
                bot.send_message(user_id, "–í —Ç–∞–±–ª–∏—Ü–µ 'players' –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'players'.")


# –¢–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä
now = '–¢—É—Ä–Ω–∏—Ä üòà'
txt = f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å üèÜ
–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ - {now}
–ë—É–¥–µ—Ç–µ –ª–∏ –≤—ã –≤ –Ω–µ–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?'''

name_pro = '''–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è ! üòà
–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–≥—Ä–æ–≤–æ–µ –∏–º—è üë§ :'''

phone_pro = '''–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì± :'''
car_pro = '''–ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫ , –Ω–∞ –∫–∞–∫–æ–π –º–∞—à–∏–Ω–µ –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å ? üöó :'''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_state(user_id, state, role):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO user_states (user_id, state, role)
                              VALUES (?, ?, ?)''', (user_id, state, role))
            conn.commit()
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_state(user_id):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT state FROM user_states WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            return row[0] if row else None
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        return None


def get_player_name_by_id(user_id):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM players WHERE id = ?", (user_id,))
            result = cursor.fetchone()
            if result:
                return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è
            else:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        return None

def get_player_car_by_id(user_id):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT car FROM players WHERE id = ?", (user_id,))
            result = cursor.fetchone()
            if result:
                return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è
            else:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    create_tables()
    create_playing_table()
    create_states()
    user_id = message.chat.id

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    reg_btn = types.KeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ü§ñ')
    play_btn = types.KeyboardButton(text='–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å üèÜ')
    laws_btn = types.KeyboardButton(text='–ü—Ä–∞–≤–∏–ª–∞ üìñ')
    markup.add(reg_btn, play_btn, laws_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:</b>\n"
        "–ï—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!"
    )
    bot.send_message(user_id, welcome_text, parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['change'])
def change(message):
    global now  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if now == '–ì–æ–Ω–∫–∏ üèÅ':
        now = '–¢—É—Ä–Ω–∏—Ä üòà'
        bot.send_message(message.chat.id, f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {now}")

    elif now == '–¢—É—Ä–Ω–∏—Ä üòà':
        now = '–ì–æ–Ω–∫–∏ üèÅ'
        bot.send_message(message.chat.id, f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {now}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text.strip() in ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ü§ñ', '/reg'])
def registering(message):
    user_id = message.chat.id
    try:
        state = get_user_state(user_id)
        if state == 'registered':
            bot.send_message(user_id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        else:
            msg = bot.send_message(user_id, f'{name_pro}')
            bot.register_next_step_handler(msg, name_process)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        logging.error(f"Error in registering handler: {e}")

# –®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏
def name_process(message):
    user_id = message.chat.id
    try:
        name = message.text
        user_data[user_id] = {'id': user_id, 'name': name}
        msg = bot.send_message(user_id, f'{phone_pro}')
        bot.register_next_step_handler(msg, phone_process)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        logging.error(f"Error in name_process: {e}")


@bot.message_handler(commands=['delete'])
def delete_self(message):
    user_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID
            cursor.execute("SELECT * FROM players WHERE id = ?", (user_id,))
            result = cursor.fetchone()

            if result:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                cursor.execute("DELETE FROM players WHERE id = ?", (user_id,))
                conn.commit()
                bot.send_message(message.chat.id, f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                set_user_state(user_id, 'unreg', 'player')
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
                bot.send_message(message.chat.id, f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"Error in delete_self: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def phone_process(message):
    user_id = message.chat.id
    try:
        phone = int(message.text)
        user_data[user_id]['phone'] = phone
        msg = bot.send_message(user_id, '–ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫ , –Ω–∞ –∫–∞–∫–æ–π –º–∞—à–∏–Ω–µ –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å ? üöó :\n')
        bot.register_next_step_handler(msg, car_process)
    except ValueError:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        name_process(message)
    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        logging.error(f"Error in phone_process: {e}")

# –®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—à–∏–Ω—ã
def car_process(message):
    user_id = message.chat.id
    try:
        car = message.text
        user_data[user_id]['car'] = car

        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO players(id, name, phone, car)
                              VALUES (?, ?, ?, ?)''', (user_data[user_id]['id'],
                                                       user_data[user_id]['name'],
                                                       user_data[user_id]['phone'],
                                                       user_data[user_id]['car']))
            conn.commit()

        set_user_state(user_id, 'registered', 'player')
        bot.send_message(user_id, '<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –≥–æ–Ω–∫—É ! ‚ù§Ô∏è</b>', parse_mode='html')
        logging.info('New player')

    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        logging.error(f"Error in car_process: {e}")

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>
/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
/reg –∏–ª–∏ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ü§ñ - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
/delete - –£–¥–∞–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å üèÜ - –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
–ü—Ä–∞–≤–∏–ª–∞ üìñ - –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
    """
    bot.send_message(message.chat.id, help_text, parse_mode='html')


@bot.message_handler(func=lambda message: message.text.strip() in ['–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å üèÜ', '/play'])
def play_handler(message):
    user_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data="back")
    race_btn = types.InlineKeyboardButton('–ì–æ–Ω–∫–∏ üèÅ', callback_data='race')
    tournire = types.InlineKeyboardButton('–¢—É—Ä–Ω–∏—Ä üòà', callback_data='tournament')
    markup.add(race_btn, tournire)
    state = get_user_state(user_id)

    if state == 'registered':
        bot.send_message(user_id, txt, reply_markup=markup)

    else:
        bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    car = get_player_car_by_id(call.message.chat.id)
    name = get_player_name_by_id(call.message.chat.id)

    if call.data == 'back':
        user_id = call.message.chat.id
        markup = types.InlineKeyboardMarkup()
        race_btn = types.InlineKeyboardButton('–ì–æ–Ω–∫–∏ üèÅ', callback_data='race')
        tournire = types.InlineKeyboardButton('–¢—É—Ä–Ω–∏—Ä üòà', callback_data='tournament')
        markup.add(race_btn, tournire)
        bot.send_message(call.message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup)


    elif call.data == 'race':
        if now == '–ì–æ–Ω–∫–∏ üèÅ':
            markup = types.InlineKeyboardMarkup()
            no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
            yes = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ!', callback_data='yes')
            back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data="back")

            markup.add(yes, no, back_btn)

            bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ "–ì–æ–Ω–∫–∏ üèÅ"\n'
                                                   '–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ,\n'
                                                   '–±–µ–∑ –æ–ø–ª–∞—Ç—ã –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º üíµ\n\n'
                                                   f'–í–∞—à–µ –∏–º—è: {name}, –ê –≤–∞—à–∞ –º–∞—à–∏–Ω–∞ - {car}\n'
                                                   '–í–µ—Ä–Ω–æ?\n', reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç - "–¢—É—Ä–Ω–∏—Ä üòà"')

    elif call.data == 'tournament':
        if now == '–¢—É—Ä–Ω–∏—Ä üòà':
            markup = types.InlineKeyboardMarkup()
            no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
            yes = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ!', callback_data='yes')
            back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data="back")

            markup.add(yes, no, back_btn)

            bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ "–¢—É—Ä–Ω–∏—Ä üòà"\n'
                                                   '–û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç "516734" üè¶ ,\n'
                                                   '—Ü–µ–Ω—É –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º ‚Äì –∫–∞–Ω–∞–ª–µ\n'
                                                   '@cherryracing üíµ\n\n'
                                                   f'–í–∞—à–µ –∏–º—è: {name}, –ê –≤–∞—à–∞ –º–∞—à–∏–Ω–∞ - {car}\n'
                                                   '–í–µ—Ä–Ω–æ?\n', reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç - "–ì–æ–Ω–∫–∏ üèÅ"')

    if call.data == 'yes':
        user_id = call.message.chat.id
        try:
            with sqlite3.connect('example.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''INSERT OR REPLACE INTO playing(id, name, car)
                                  VALUES (?, ?, ?)''', (user_id,
                                                           name,
                                                           car))
                conn.commit()

            bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏!')
            logging.info('New player in competition!')

        except Exception as e:
            bot.reply_to(call.message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            logging.error(f"Error in playing: {e}")

    if call.data == 'no':
        bot.send_message(call.message.chat.id, '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å!')

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/reg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ\n"
        "üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å üèÜ - –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n"
        "üìñ –ü—Ä–∞–≤–∏–ª–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    )
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∞–≤–∏–ª–∞ üìñ')
def rule(message):
    bot.send_message(message.chat.id, f'{rules_text}')

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
while True:
    try:
        logging.info("Starting bot polling")
        bot.polling(none_stop=True, timeout=60, interval=0, port=PORT)
    except Exception as e:
        logging.error(f"Error occurred: {e}")
        time.sleep(15)
